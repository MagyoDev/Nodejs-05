.list.contains(t):!!~r(this.array(),t)}},8744:function(t,e,n){var r=window.addEventListener?"addEventListener":"attachEvent",i=window.removeEventListener?"removeEventListener":"detachEvent",o="addEventListener"!==r?"on":"",s=n(63);e.bind=function(t,e,n,i){t=s(t);for(var a=0;a<t.length;a++)t[a][r](o+e,n,i||!1)},e.unbind=function(t,e,n,r){t=s(t);for(var a=0;a<t.length;a++)t[a][i](o+e,n,r||!1)}},841:function(t){t.exports=function(t){for(var e,n=Array.prototype.slice.call(arguments,1),r=0;e=n[r];r++)if(e)for(var i in e)t[i]=e[i];return t}},9294:function(t){t.exports=function(t,e,n){var r=n.location||0,i=n.distance||100,o=n.threshold||.4;if(e===t)return!0;if(e.length>32)return!1;var s=r,a=function(){var t,n={};for(t=0;t<e.length;t++)n[e.charAt(t)]=0;for(t=0;t<e.length;t++)n[e.charAt(t)]|=1<<e.length-t-1;return n}();function l(t,n){var r=t/e.length,o=Math.abs(s-n);return i?r+o/i:o?1:r}var c=o,u=t.indexOf(e,s);-1!=u&&(c=Math.min(l(0,u),c),-1!=(u=t.lastIndexOf(e,s+e.length))&&(c=Math.min(l(0,u),c)));var p,h,d=1<<e.length-1;u=-1;for(var f,g=e.length+t.length,m=0;m<e.length;m++){for(p=0,h=g;p<h;)l(m,s+h)<=c?p=h:g=h,h=Math.floor((g-p)/2+p);g=h;var v=Math.max(1,s-h+1),y=Math.min(s+h,t.length)+e.length,b=Array(y+2);b[y+1]=(1<<m)-1;for(var x=y;x>=v;x--){var w=a[t.charAt(x-1)];if(b[x]=0===m?(b[x+1]<<1|1)&w:(b[x+1]<<1|1)&w|(f[x+1]|f[x])<<1|1|f[x+1],b[x]&d){var j=l(m,x-1);if(j<=c){if(c=j,!((u=x-1)>s))break;v=Math.max(1,2*s-u)}}}if(l(m+1,s)>c)break;f=b}return!(u<0)}},7961:function(t){t.exports=function(t,e){var n=t.getAttribute&&t.getAttribute(e)||null;if(!n)for(var r=t.attributes.length,i=0;i<r;i++)void 0!==e[i]&&e[i].nodeName===e&&(n=e[i].nodeValue);return n}},4209:function(t){t.exports=function(t,e,n,r){return(r=r||{}).test&&r.getElementsByClassName||!r.test&&document.getElementsByClassName?function(t,e,n){return n?t.getElementsByClassName(e)[0]:t.getElementsByClassName(e)}(t,e,n):r.test&&r.querySelector||!r.test&&document.querySelector?function(t,e,n){return e="."+e,n?t.querySelector(e):t.querySelectorAll(e)}(t,e,n):function(t,e,n){for(var r=[],i=t.getElementsByTagName("*"),o=i.length,s=new RegExp("(^|\\s)"+e+"(\\s|$)"),a=0,l=0;a<o;a++)if(s.test(i[a].className)){if(n)return i[a];r[l]=i[a],l++}return r}(t,e,n)}},5191:function(t){var e=[].indexOf;t.exports=function(t,n){if(e)return t.indexOf(n);for(var r=0;r<t.length;++r)if(t[r]===n)return r;return-1}},63:function(t){t.exports=function(t){if(void 0===t)return[];if(null===t)return[null];if(t===window)return[window];if("string"==typeof t)return[t];if(function(t){return"[object Array]"===Object.prototype.toString.call(t)}(t))return t;if("number"!=typeof t.length)return[t];if("function"==typeof t&&t instanceof Function)return[t];for(var e=[],n=0;n<t.length;n++)(Object.prototype.hasOwnProperty.call(t,n)||n in t)&&e.push(t[n]);return e.length?e:[]}},1631:function(t){t.exports=function(t){return t=(t=null===(t=void 0===t?"":t)?"":t).toString()}},2862:function(t,e,n){var r=n(5485);t.exports=function(){var t=new r.Template({code:function(t,e,n){var r=this;return r.b(n=n||""),r.s(r.f("projects",t,e,1),t,e,0,13,832,"{{ }}")&&(r.rs(t,e,(function(t,e,r){r.b('  <h2 id="'),r.b(r.v(r.f("project_id",t,e,0))),r.b('">\r'),r.b("\n"+n),r.b("    "),r.b(r.v(r.f("name",t,e,0))),r.b("\r"),r.b("\n"+n),r.b('    <a class="btn btn-xs btn-secondary margin-left-10 uppercase" href="https://projects.eclipse.org/projects/'),r.b(r.v(r.f("project_id",t,e,0))),r.b('">\r'),r.b("\n"+n),r.b("        "),r.b(r.v(r.f("project_id",t,e,0))),r.b("\r"),r.b("\n"+n),r.b("    </a>\r"),r.b("\n"+n),r.b("  </h2>\r"),r.b("\n"+n),r.b('  <ul class="text-center list-inline">\r'),r.b("\n"+n),r.s(r.f("adopters",t,e,1),t,e,0,284,808,"{{ }}")&&(r.rs(t,e,(function(t,e,r){r.b("      <li>\r"),r.b("\n"+n),r.b('        <a href="'),r.b(r.v(r.f("homepage_url",t,e,0))),r.b('">\r'),r.b("\n"+n),r.s(r.f("isWhiteLogo",t,e,1),t,e,0,361,546,"{{ }}")&&(r.rs(t,e,(function(t,e,r){r.s(r.f("logo_white",t,e,1),t,e,0,390,519,"{{ }}")&&(r.rs(t,e,(function(t,e,r){r.b('              <img class="adopters-img" alt="'),r.b(r.v(r.f("name",t,e,0))),r.b('" src="'),r.b(r.v(r.fspace = {
            func: functionBind.call(function () {
                args = Array.prototype.slice.call(arguments);
                context = this;
            }, boundContext)
        };
        namespace.func(1, 2, 3);
        st.equal(context, boundContext, 'binds a context properly');
        st.deepEqual(args, [1, 2, 3], 'supplies passed arguments');
        st.end();
    });

    t.test('with bound arguments', function (st) {
        var args, context;
        var boundContext = {};
        var namespace = {
            func: functionBind.call(function () {
                args = Array.prototype.slice.call(arguments);
                context = this;
            }, boundContext, 1, 2, 3)
        };
        namespace.func(4, 5, 6);
        st.equal(context, boundContext, 'binds a context properly');
        st.deepEqual(args, [1, 2, 3, 4, 5, 6], 'supplies bound and passed arguments');
        st.end();
    });

    t.test('returns properly', function (st) {
        var boundContext = {};
        var args;
        var namespace = {
            func: functionBind.call(function () {
                args = Array.prototype.slice.call(arguments);
                return this;
            }, boundContext)
        };
        var context = namespace.func(1, 2, 3);
        st.equal(context, boundContext, 'returned context is bound context');
        st.notEqual(context, getCurrentContext.call(), 'returned context is not lexical context');
        st.deepEqual(args, [1, 2, 3], 'passed arguments are correct');
        st.end();
    });

    t.test('returns properly with bound arguments', function (st) {
        var boundContext = {};
        var args;
        var namespace = {
            func: functionBind.call(function () {
                args = Array.prototype.slice.call(arguments);
                return this;
            }, boundContext, 1, 2, 3)
        };
        var context = namespace.func(4, 5, 6);
        st.equal(context, boundContext, 'returned context is bound context');
        st.notEqual(context, getCurrentContext.call(), 'returned context is not lexical context');
        st.deepEqual(args, [1, 2, 3, 4, 5, 6], 'passed arguments are correct');
        st.end();
    });

    t.test('passes the correct arguments when called as a constructor', function (st) {
        var expected = { name: 'Correct' };
        var namespace = {
            Func: functionBind.call(function (arg) {
                return arg;
            }, { name: 'Incorrect' })
        };
        var returned = new namespace.Func(expected);
        st.equal(returned, expected, 'returns the right arg when called as a constructor');
        st.end();
    });

    t.test('has the new instance\'s context when called as a constructor', function (st) {
        var actualContext;
        var expectedContext = { foo: 'bar' };
        var namespace = {
            Func: functionBind.call(function () {
                actualContext = this;
            }, expectedContext)
        };
        var result = new namespace.Func();
        st.equal(result instanceof namespace.Func, true);
        st.notEqual(actualContext, expectedContext);
        st.end();
    });

    t.end();
});

test('bound function length', function (t) {
    t.test('sets a correct length without thisArg', function (st) {
        var subject = functionBind.call(function (a, b, c) { return a + b + c; });
        st.equal(subject.length, 3);
        st.equal(subject(1, 2, 3), 6);
        st.end();
    });

    t.test('sets a correct length with thisArg', function (st) {
        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, {});
        st.equal(subject.length, 3);
        st.equal(subject(1, 2, 3), 6);
        st.end();
    });

    t.test('sets a correct length without thisArg and first argument', function (st) {
        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, undefined, 1);
        st.equal(subject.length, 2);
        st.equal(subject(2, 3), 6);
        st.end();
    });

    t.test('sets a correct length with thisArg and first argument', function (st) {
        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, {}, 1);
        st.equal(subject.length, 2);
        st.equal(subject(2, 3), 6);
        st.end();
    });

    t.test('sets a correct length without thisArg and too many arguments', function (st) {
        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, undefined, 1, 2, 3, 4);
        st.equal(subject.length, 0);
        st.equal(subject(), 6);
        st.end();
    });

    t.test('sets a correct length with thisArg and too many arguments', function (st) {
        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, {}, 1, 2, 3, 4);
        st.equal(subject.length, 0);
        st.equal(subject(), 6);
        st.end();
    });
});
